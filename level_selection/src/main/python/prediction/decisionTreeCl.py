import pickle
import os

import sklearn.tree as sklTree
from sklearn2pmml import sklearn2pmml
from sklearn2pmml.pipeline import PMMLPipeline

__all__ = ["train_classifier", "tree_to_java_code"]

__current_working__dir = os.path.dirname(os.path.abspath(__file__))
tr_classifier_output = os.path.join(__current_working__dir,'tr_classifier.pkl')
tr_classifier_pmml = os.path.join(__current_working__dir,'tr_classifier.pmml')


""" Trains a decision tree classifier and pickles the final model.

:param features_training    ->  training features
:param labels_training      ->  training labels

:return                     ->  classifier model
"""
def train_classifier(features_training, labels_training, debug=False):
    pipeline = PMMLPipeline([("classifier", sklTree.DecisionTreeClassifier(criterion="entropy", splitter='random', max_depth=5))])
    pipeline.fit(features_training, labels_training)
    with open(tr_classifier_output, 'wb') as file:
        pickle.dump(pipeline, file)
    return pipeline

""" Converts a decision tree to Java code.

:param tree    ->  instance of a decision tree
:param feature_names      ->  list of features known to the model
:param filepath         ->  Java output location
:param classname        ->  Java class
"""
def tree_to_java_code(tree, feature_names, filepath, classname):
    with open(filepath, 'w') as file:
        tree_ = tree.tree_
        feature_name = [
            feature_names[i] if i != sklTree._tree.TREE_UNDEFINED else "undefined!"
            for i in tree_.feature
        ]
        file.write("// THIS FILE WAS AUTOMATICALLY GENERATED BY 'src/Python/decision_tree/decision_tree.py'\n\n")
        file.write("package level_selection.model_representation;\n\n")
        file.write("public class "+classname+" {\n")
        file.write("public static int[] predict({}) {{\n".format(", ".join(['int '+f for f in feature_names])))

        def recurse(node, depth):
            indent = "  " * depth
            if tree_.feature[node] != sklTree._tree.TREE_UNDEFINED:
                name = feature_name[node]
                threshold = tree_.threshold[node]
                file.write( "{}if ({} <= {}){{\n".format(indent, name, threshold))
                recurse(tree_.children_left[node], depth + 1)
                file.write ("{}}}else  /* if {} > {}*/{{\n".format(indent, name, threshold))
                recurse(tree_.children_right[node], depth + 1)
                file.write("{}}}\n".format(indent))
            else:
                file.write("{}return new int[] {{{}}};\n".format(indent, ','.join([str(int(round(i))) for i in list(tree_.value[node][0])])))

        recurse(0, 1)
        file.write("}\n}")
